hec = HairEyeColor
mosaicplot(hec, shade = TRUE)
#suprisingly few people with blond hair and blue eyes, while an unexpectedly
#large number of blonde hair, blue-eyed women, assuming a normal distribution.
#Similarly, there is a larger-than-expected number of people with brown eyes
#and black hair, while few than expected women with blue eyes and brown or
#black hair.
chisq.test(slct_data[,,'Male'] + slct_data[,,'Female']) #eye and hair color
slct_data = hec[,c('Brown', 'Blue'),]
mosaicplot(slct_data, shade = TRUE)
#I see a very similar pattern in the standardized residuals.
chisq.test(slct_data[,,'Male'] + slct_data[,,'Female']) #eye and hair color
#It looks like it is extremely unlikely that they are independent.
chisq.test(slct_data[,'Blue',] + slct_data[,'Brown',]) #hair and gender
chisq.test(slct_data['Black',,] + slct_data['Brown',,] +
slct_data['Red',,] + slct_data['Blond',,]) #eye and gender
#Eye and hair seem to be much less dependent than gender and any catagory.
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
#1a Example numerical EDA.
summary(temp)
# We can also use str(),dim(),nrow(),ncol() to know the dataset
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
# use sapply: sapply(temp, sd)
cor(temp$Body.Temp, temp$Heart.Rate) # Bivariate methods
#http://purpledreams.com/~mike/math_studies_11/statistics_08.pdf
# no strong linear relationship
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
# what if we change prob = T? plot by frequency; we want to plot probability density here
lines(density(temp$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(temp$Heart.Rate), col = "red")
# bivariate density plot
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
lines(density(temp$Body.Temp[temp$Gender == "Male"]), col = "blue")
plot(density(temp$Heart.Rate[temp$Gender == "Male"]), col = "blue")
lines(density(temp$Heart.Rate[temp$Gender == "Female"]), col = "pink")
# scatter plot
plot(temp$Body.Temp, temp$Heart.Rate, col = temp$Gender)
#3ab One Sample T-Test
# H0: Aveage(body_temperature)=96.8
t.test(temp$Body.Temp, mu = 98.6, alternative = "two.sided")
#The p-value for this test is extremely small (<.0005); thus, we reject the null
#hypothesis that the average human body temperature is 98.6 degrees F in favor of
#the alternative that the average temperature is different than 98.6 degrees F at the
#95% confidence level.
#We are 95% confident that the true average human body
#temperature is between 98.122 degrees F and 98.377 degrees F.
#4ab Two Sample T-Test
# H0: Aveage(male body_temperature)=Aveage(female body_temperature)
t.test(temp$Body.Temp[temp$Gender == "Female"],
temp$Body.Temp[temp$Gender == "Male"],
alternative = "two.sided")
t.test(temp$Body.Temp ~ temp$Gender, alternative = "two.sided") #Equivalent.
#The p-value for this test is about 0.024, which is less than our cutoff value
#of 0.05; thus, we reject the null hypothesis that the average human body
#temperature is the same for males and females in favor of the alternative that
#they differ in some manner at the 95% confidence level. We are 95% confident
#that the true difference is between 0.039 and 0.540 degrees F, with Females
#having a higher average body temperature.
#4c (BONUS)
library(dplyr)
Ma = temp %>% filter(Gender == 'Male')
Fe = temp %>% filter(Gender == 'Female')
avg = numeric()
for(i in 1:10000){
m = sample(Ma$Body.Temp, 65, replace=T)
f = sample(Fe$Body.Temp, 65, replace=T)
avg[i] = mean(f-m)
}
lower_bnd = mean(avg) - 2*sd(avg)
upper_bnd = mean(avg) + 2*sd(avg)
#5ab F-Test
#H0: Average(male body_temperature)=Average(female body_temperature)
#H1: Average(male body_temperature)<Average(female body_temperature)
# http://2012books.lardbucket.org/books/beginning-statistics/s15-chi-square-tests-and-f-tests.html
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "less")
#Under the null hypothesis, males and females have the same heart rate variance;
#we test whether females have a statistically significantly lower heart rate
#variance than males. We find that the p-value is extremely high (0.9945). Thus,
#we retain our null hypothesis. We are 95% confident that the true ratio is
#between 0 and 2.88 -- note that this interval contains 1 (the null hypothesis).
#Change the H1:
#H0: Average(male body_temperature)=Average(female body_temperature)
#H1: Average(male body_temperature)>Average(female body_temperature)
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "greater") #p-value = 0.005502
# 95 percent confidence interval:
#   1.257668      Inf
# Why Inf?
# When should we use alternative = "two.sided"
library(ggplot2)
library(datasets)
PlantGrowth
#1 Creating side-by-side boxplots of the data.
boxplot(weight ~ group, data = PlantGrowth)
#2a Calculating the standard deviations of each treatment group.
sd(PlantGrowth$weight[PlantGrowth$group == "ctrl"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt1"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt2"])
# Use ggplot
ggplot(PlantGrowth, aes(x = group, y = weight))+
geom_boxplot(color = c("red", "blue", "green"))
#Conducting the Bartlett test of homogeneity of variances.
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
#The p-value for this test is > 0.05; we do not have statistical evidence to
#conclude that the variances of the plant treatment groups are different.
#3a One-Way ANOVA - access the equality of means of two or more groups?
# What the relationship between a Two sample T-test and One-way ANOVA,if there are exactly two groups?
summary(aov(weight ~ group, data = PlantGrowth))
# plot(aov(weight ~ group, data = PlantGrowth))
#The p-value for this test is 0.02, which is smaller than our cutoff value of
#0.05; we have evidence to conclude that the average plant weight varies by the
#type of treatment that was applied. This conclusion is valid based on the
#Bartlett test because we determined that the group variances are not statistically
#different from one another.
#3b multiple comparisons
# https://en.wikipedia.org/wiki/Multiple_comparisons_problem
str(HairEyeColor)
#1ab Visualizing the data with a mosaic plot.
# A mosaic plot is a graphical display that allows you to
# examine the relationship among two or more categorical variables.
mosaicplot(HairEyeColor, shade = TRUE)
#https://medschool.vanderbilt.edu/cqs/files/cqs/media/DrTsai2_0.pdf
#Whereas most categories do not deviate very far from expected combination values,
#some appear to have high standardized residuals. In particular, the blond hair
#category for both genders with brown eyes does not contain a lot of observations.
#On the other hand, the blond hair category has a lot more than expected females
#with blue eyes.
#2a Reducing the dataset to all hair colors, brown & blue eye colors, and just
#females.
reduced = HairEyeColor[,1:2,2]
#Visualizing the reduced data with a mosaic plot.
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
#Chi-Squared test of independence.
reduced.test = chisq.test(reduced)
reduced.test
#The chi-squared test reports a significant p-value at the 0.05 level; thus we
#conclude that the hair and eye colors of females are not independent of one
#another.
#3 Calculating each category combination's contribution to the chi-squared
#statistic.
# H0: The hair and eye colors are independent of one another
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
reduced.test$observed - reduced.test$expected
# reduced.test$expected:the expected counts under the null hypothesis.
#Blonde hair and blue eyed females contributed the largest proportion to the chi-
#squared statistic with a value of 29.55; there were about 31 more observations
#in this category than we would have expected under the assumption of independence.
#Red hair and brown eyed females contributed the least proportion to the chi-
#squared statistic with a value of 1.42; there were only about 4 more observations
#in this category than we would have expected under the assumption of independence.
pwd
getwd()
ls
setwd("~/Data_Sci_2k18")
getwd()
setwd("exoplanetShiny")
getwd()
shiny::runApp('~/Data_Sci_2k18/shinyApps/leaflet_demo')
library(googleVis)
library(dplyr)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(googleVis)
runApp()
View(raw_data)
raw_data = read.csv("kepler.csv")
raw_data = read.csv("https://github.com/mathSlug/exoplanetShiny/kepler.csv")
raw_data = read.csv("kepler.csv")
View(raw_data)
View(raw_data)
names(raw_data)
raw_data = read.csv("kepler.csv")
use_data = raw_data %>% filter(., planet_status == "Confirmed") %>%
select(., star_name, star_distance, X..name = planet_name, detection_type,
mass = planet_mass,radius = planet_radius,
discovered = discovery_year, temp_calculated, temp_measured)
use_data = raw_data %>% filter(., planet_status == "Confirmed") %>%
select(., star_name, star_distance, planet_name = X..name, detection_type,
planet_mass = mass,radius = planet_radius,
discovery_year = discovered, temp_calculated, temp_measured)
use_data = raw_data %>% filter(., planet_status == "Confirmed") %>%
select(., star_name, star_distance, planet_name = X..name, detection_type,
planet_mass = mass,planet_radius = radius,
discovery_year = discovered, temp_calculated, temp_measured)
View(use_data)
View(use_data)
runApp()
runApp()
runApp()
runApp()
function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(use_data)
str(use_data$discovery_year)
sum(is.na(use_data$discovery_year))
min(use_data$discovery_year)
max(use_data$discovery_year)
max(use_data$discovery_year, na.rm = TRUE)
x = filter(use_data, is.na(discovery_year))
View(x)
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bar1data = scatter_data %>% filter(., discovery_year = input$slider1)
runApp()
runApp()
bar1data = scatter_data %>% filter(., discovery_year == input$slider1)
runApp()
runApp()
bar1data = scatter_data %>% filter(., discovery_year == 2002)
View(bar1data)
bar1 = ggplot(bar1data, aes(x = detection_type)) + geom_bar()
bar1
runApp()
View(bar1data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bar1data = scatter_data %>% filter(., discovery_year == 2000)
hist(bar1data)
hist(bar1data$discovery_year)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
histdata <- rnorm(500)
runApp()
2000 %% 50
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggThemeAssist:::ggThemeAssistAddin()
scatter1data = scatter_data %>% filter(., discovery_year <= 2000 )#
ggThemeAssist:::ggThemeAssistAddin()
runApp()
runApp()
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
runApp()
ggThemeAssist:::ggThemeAssistAddin()
runApp()
ggThemeAssist:::ggThemeAssistAddin()
runApp()
runApp()
ggThemeAssist:::ggThemeAssistAddin()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dashboardSidebar
runApp()
runApp()
View(scatter_data)
sum(is.na(scatter_data$detection_type))
runApp()
ggThemeAssist:::ggThemeAssistAddin()
runApp()
runApp()
runApp()
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/shinyApps/shinyDashBoard')
runApp('~/Downloads/shinyApps/shinyDashBoard')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/shinyApps/shinyDashBoard')
runApp()
runApp('~/Downloads/shinyApps/shinyDashBoard')
runApp()
runApp()
runApp('~/Downloads/shinyApps/shinyDashBoard')
?sidebarUserPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?menuItem
runApp()
runApp()
runApp()
runApp()
icon("chart-bar", lib = "font-awesome")
print(icon("chart-bar", lib = "font-awesome"))
View(icon("chart-bar", lib = "font-awesome"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dashboardSidebar
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(use_data)
x = filter(use_data, detection_type == "Primary Transit, TVV")
runApp()
x = filter(use_data, detection_type == "Primary Transit, TTV")
View(x)
y = filter(use_data, detection_type == "TTV")
View(y)
z = filter(use_data, detection_type == "Primary Transit")
View(z)
runApp()
runApp()
View(use_data)
str(use_data)
str(use_data$detection_type)
levels(use_data$detection_type)
runApp()
runApp()
?formatStyle
runApp()
View(use_data)
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
append(list(1,2,3,4), list(3,3,3))
extend(list(1,2,3,4), list(3,3,3))
list(1,2,3,4)
runApp()
runApp()
runApp()
runApp()
